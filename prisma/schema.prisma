generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String
  email         String?         @unique
  password      String?
  phone         String?         @unique
  auth_id       String?         @unique
  avatar        String?
  auth_type     String          @default("email")
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  tokens        SMSToken[]
  gatheringPost GatheringPost[]
  communityPost CommunityPost[]
  comments      Comment[]
  likes         Like[]
  chatRooms     ChatRoom[]
  messages      Message[]
  participants  Participant[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model GatheringPost {
  id              Int           @id @default(autoincrement())
  title           String
  description     String
  location        String        @default("")
  price           Float
  photo           String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  status          String        @default("open")
  participants    Participant[]
  maxParticipants Int
  endDate         DateTime
}

model Participant {
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  gathering       GatheringPost @relation(fields: [gatheringPostId], references: [id])
  gatheringPostId Int
  status          String        @default("pending")
  joined_at       DateTime      @default(now())

  @@id(name: "id", fields: [userId, gatheringPostId])
}

model CommunityPost {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id              Int            @id @default(autoincrement())
  payload         String
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  communityPost   CommunityPost? @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
  communityPostId Int?
}

model Like {
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityPost   CommunityPost @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
  userId          Int
  communityPostId Int
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@id(name: "id", [userId, communityPostId])
}

model ChatRoom {
  id         String    @id @default(cuid())
  users      User[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String
  userId     Int
  isRead     Boolean  @default(false)
}
